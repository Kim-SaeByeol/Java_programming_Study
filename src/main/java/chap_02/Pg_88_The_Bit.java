package chap_02;

public class Pg_88_The_Bit {
    /* 컴퓨터는 0과 1의 값만 가지고 다루게 되는데 이를 2진수 라고 한다.
    비트(bit) 는 2진수 한자리 값을 뜻하며, 8개의 비트는 1개의 바이트(byte)가 된다.
    우리가 쓰는 수는 10진수 이며, 컴퓨터는 보통 이 10진수를 2진수로 바꾸어 비트(bit)에 저장한 후 결과 값을 처리하고 10진수로 변환하여 우리에게 출력해준다.


    Pg.69 참고.
    컴퓨터에서 정수를 입력할때, 10진수 13은 13으로 그저 숫자만 표현하고,
    10진수 13을 8진수로 나타내면 앞에 0을 붙여 015 -> (1*8*5 = 13 즉, 10진수 13.) 으로 표현하게 된다.
    10진수 21을 16진수로 나타내면 앞에 0x를 붙여 0x15 -> (1*16+5= 21 즉, 10진수 21) 으로 표현하게 되며,
    10진수 5를 2진수로 나타내면 앞에 0b를 붙여 0b0101 -> 10진수 5 로 표현하게 된다.

    2진수는 0과 1의 값 만으로 이루어져있으며, 10진수로 변환할 경우
    1 = 0000 0001 , 2 = 0000 0010 . 3 = 0000 0011, 4= 0000 0100, 5 = 0000 0101, 6 = 0000 0110 , 7 = 0000 0111, 8 = 0000 1000.
    -1 = 1000 0001, -2 = 1000 0010, -3 = 1000 0011 , -4 = 1000 0100, -5 = 1000 0101, -6 = 1000 0110, -7 = 1000 0111, -8 = 1000 1000
    우측에 빈 자리에 먼저 1로 쓰고 1이 써져있으면 앞 글자를 1로. 본래 끝에 있던 수를 0으로 바꿔 왼쪽으로 나아가는 방식이며,
    2진수가 정수일 경우에는 1바이트 맨 앞 비트 자리에 0을 넣고, 2진수가 음수일 경우에는 1바이트 맨 앞 비트 자리에 1을 넣어주면 된다.

    2진수의 계산에 관하여.  Pg81 참고.
      0110   => 10진수 6      0011 => 10진수 3      0110 => 10진수 6      0011 => 10진수 3          0011    (하나라도 1이면 1)
           +0010   => 10진수 2     +0010 => 10잔수 2     -0011 => 10진수 3     *0101 => 10진수 5    (or) |0101    (00 = 0 / 01, 10, 11 = 1)
     ----------             -----------------     -----------------     -----------------     ------------
      1000   => 10진수 8      0101 => 10진수 5      0011 => 10진수 3      0101                     0111
                                                                      +1010
                                                                       1111 => 10진수 15

        0011 (둘다 1 이면 1)                                             1101   (같으면 0, 다르면 1)      1001 (뒤로 2번 넘기니 01이 짤려나감.)    1001 (앞으로 2번 밀고 남은 공간을 0으로 채움)
 (and) &0101                     (not) ~0101 (0과 1이 반대로)     (XOR) ^ 0101                (shift) >>   2                         (shift) << 2
     ---------                        ----------                       ------                         ------                              -------
        0001                            1010                            1000                             10                               100100
      1+1 = 0 이므로 1을 다음 자릿수에 넘겨주고 다음 자릿수도 1+1이 된다면 같은 방식으로 0으로 바꾸고 또 넘겨주어 값을 정한다.
      -는 반대로 한다. 10 - 01 일 경우 앞에 1을 뒤로 넘겨 01 이 되며, 0100 - 0010 일 경우 마찬가지로 0010 이 된다.
     */
    public static void main(String[] args) {
        //shift << 연산자 사용.
        int a = 0x00000010; //10진수 '16'을 16진수로 표현
        System.out.println(a);      //0000 0000 0000 0000 0000 0000 0001 0000 => 10진수 16
        a = a <<2;
        System.out.println(a);      //0000 0000 0000 0000 0000 0000 0100 0000 => 10진수 64
        // 양수에 대한 shift
        a = 0x00000010;     //10진수 '16'을 16진수로 표현
        System.out.println(a);
        a <<= 2;                    // a = a<<2 == a <<= 2
        System.out.println(a);
        // 음수에 대한 shift
        a = -0x00000010;    //10진수 '16'을 16진수로 표현
        System.out.println(a);      //1000 0000 0000 0000 0000 0000 0001 0000  => 10진수 -16
        a <<= 2;
        System.out.println(a);      //1000 0000 0000 0000 0000 0000 0100 0000  => 10진수 -64

        int b = 0b0101;
        System.out.println(b);      //0000 0101
        b = b <<2;
        System.out.println(b);      //0001 0100

        b= -0b0101;
        System.out.println(b);      //1000 0101
        b = b <<2;
        System.out.println(b);      //1001 0100

        b = b <<3;
        System.out.println(b);      //1010 0000
        /*
        0000 0000      => 2진수
            0000 0000 0000 0000 => 8진수
                0000 0000 0000 0000 0000 0000 0000 0000 => 16진수
         */
        a = 0x00000010;
        System.out.println(a);      //0000 0000 0000 0000 0000 0000 0001 0000 => 10진수 16
        a = a >>> 1;
        System.out.println(a);     //0000 0000 0000 0000 0000 0000 0000 1000 => 10진수 8

        a= -0x00000010;
        System.out.println(a);      //1000 0000 0000 0000 0000 0000 0001 0000 => 10진수 16
        a = a >>> 1;
        System.out.println(a);     // 0111 1111 1111 1111 1111 1111 1111 1000 => 10진수 2147483640
    }
}